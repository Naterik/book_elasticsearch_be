generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model author {
    @@map("authors")
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(255)
  bio  String? @db.Text

  
  books book[]
}

model book {
  @@map("books")
  id          Int      @id @default(autoincrement())
  isbn        String      @unique(map: "Book_isbn_key")
  title       String   @db.VarChar(255)
  shortDesc   String   @db.VarChar(255)
  detailDesc  String   @db.MediumText
  price       Int
  quantity    Int
  publishDate DateTime @default(now())
  image       String   @db.MediumText
  language    String?   @db.VarChar(20)
  pages       Int
  borrowed    Int      @default(0)
  

  authors    author @relation(fields: [authorId],references: [id])
authorId   Int

  publishers  publisher@relation(fields: [publisherId],references: [id])
  publisherId Int

   bookCopys  bookcopy[]
  genres genre[]

}

model bookcopy {
    @@map("book_copy")
  id             Int @id @default(autoincrement())
  year_published Int @db.Year
  copyNumber     Int

  books    book @relation(fields: [bookId], references: [id])
  bookId Int

  loans loan[]
}

model genre {
     @@map("genres")
  id          Int    @id @default(autoincrement())
  name        String @db.VarChar(255)
  description String @db.Text

  books book[]
}

model loan {
   @@map("loans")
  id         Int      @id @default(autoincrement())
  loanDate   DateTime? @default(now())
  dueDate    DateTime?
  returnDate DateTime?
  status     String   @db.VarChar(255)
  fineAmount Int?
 
  bookCopy bookcopy @relation(fields: [bookcopyId], references: [id])
  bookcopyId Int

  user user @relation(fields: [userId], references: [id])
  userId Int
}

model notification {
   @@map("notifications")
  id      Int      @id @default(autoincrement())
  sentAt  DateTime
  type    String   @db.VarChar(255)
  content String   @db.Text
  isRead Boolean  @default(false)

   user user @relation(fields: [userId], references: [id])
  userId Int
}

model publisher {
   @@map("publishers")
  id          Int    @id @default(autoincrement())
  name        String @db.VarChar(255)
  description String @db.Text
 

  books book[]
}

model reservation {
  @@map("reservations")

  id          Int      @id @default(autoincrement())
  requestDate DateTime?
  status      String   @db.VarChar(255)
  
  user user @relation(fields: [userId], references: [id])
  userId Int
}

model role {
    @@map("roles")
  id          Int    @id @default(autoincrement())
  name        String @db.VarChar(20)
  description String @db.VarChar(255)

  users user[]
}

model user {
   @@map("users")
  id              Int      @id @default(autoincrement())
  username        String   @db.VarChar(255)
  password        String   @db.VarChar(255)
  fullName        String?   @db.VarChar(255)
  address         String?  @db.VarChar(255)
  phone           String?   @db.VarChar(255)
  image           String?  @db.VarChar(255)
  cardNumber      Int?
  membershipStart DateTime? @default(now())
  membershipEnd   DateTime? @default(now())
  status          String   @default("ACTIVE")
 
  role role @relation(fields: [roleId], references: [id])
  roleId Int

  loans loan []
  reservations reservation[]
  notifications notification[]
}

