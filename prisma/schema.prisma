generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Author {
  @@map("authors")
  id    Int     @id @default(autoincrement())
  name  String  @db.VarChar(255)
  bio   String? @db.Text

  books Book[]
}

model Book {
  @@map("books")
  id           Int       @id @default(autoincrement())
  isbn         String    @unique(map: "Book_isbn_key")
  title        String    @db.VarChar(255)
  shortDesc    String    @db.VarChar(255)
  detailDesc   String    @db.MediumText
  price        Int
  quantity     Int
  publishDate  DateTime?
  image        String    @db.MediumText
  language     String?   @db.VarChar(20)
  pages        Int
  borrowed     Int       @default(0)

  authors      Author    @relation(fields: [authorId], references: [id])
  authorId     Int

  publishers   Publisher @relation(fields: [publisherId], references: [id])
  publisherId  Int

  bookCopys    Bookcopy[]
  genres       Genre[]
  reservations Reservation[]
}

model Bookcopy {
  @@map("book_copy")
  id             Int    @id @default(autoincrement())
  year_published Int    @db.Year
  copyNumber     Int

  books   Book @relation(fields: [bookId], references: [id])
  bookId  Int

  loans   Loan[]
}

model Genre {
  @@map("genres")
  id          Int    @id @default(autoincrement())
  name        String @db.VarChar(255)
  description String @db.Text

  books Book[]
}

model Loan {
  @@map("loans")
  id         Int       @id @default(autoincrement())
  loanDate   DateTime? @default(now())
  dueDate    DateTime?
  returnDate DateTime?
  status     String    @db.VarChar(255)
  fineAmount Int?

  bookCopy   Bookcopy @relation(fields: [bookcopyId], references: [id])
  bookcopyId Int

  user       User     @relation(fields: [userId], references: [id])
  userId     Int
}

model Notification {
  @@map("notifications")
  id      Int       @id @default(autoincrement())
  sentAt  DateTime?
  type    String    @db.VarChar(255)
  content String    @db.Text
  isRead  Boolean   @default(false)

  user    User      @relation(fields: [userId], references: [id])
  userId  Int
}

model Publisher {
  @@map("publishers")
  id          Int    @id @default(autoincrement())
  name        String @db.VarChar(255)
  description String @db.Text

  books Book[]
}

model Reservation {
  @@map("reservations")
  id          Int       @id @default(autoincrement())
  requestDate DateTime?
  status      String    @db.VarChar(255)

  book  Book @relation(fields: [bookId], references: [id])
  bookId Int

  user  User @relation(fields: [userId], references: [id])
  userId Int
}

model Role {
  @@map("roles")
  id          Int    @id @default(autoincrement())
  name        String @db.VarChar(20)
  description String @db.VarChar(255)

  users User[]
}

model User {
  @@map("users")
  id              Int      @id  @default(autoincrement())
  username        String   @unique @db.VarChar(255)
  password        String   @db.VarChar(255)
  fullName        String?  @db.VarChar(255)
  address         String?  @db.VarChar(255)
  phone           String?  @db.VarChar(255)
  avatar          String?  @db.VarChar(255)
  type            String   @default("SYSTEM")
  cardNumber      Int?
  membershipStart DateTime?
  membershipEnd   DateTime?
  status          String   @default("ACTIVE")
  googleId        String?  @unique @db.VarChar(64)

  roleId          Int
  role            Role     @relation(fields: [roleId], references: [id])

  loans           Loan[]
  reservations    Reservation[]
  notifications   Notification[]
}
